{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","store/tasks-reducer.ts","utils/error-utils.ts","store/auth-reducer.ts","store/app-reducer.ts","store/todoLists-reducer.ts","api/task-api.ts","components/Todolist/Todolist.tsx","store/store.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","components/TodoListList/TodoListList.tsx","components/Login/Login.tsx","App/AppWidtxRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trimTitle","trim","errorMessage","style","color","TextField","size","variant","value","placeholder","onChange","e","currentTarget","onKeyPress","key","label","helperText","disabled","IconButton","onClick","AddBox","fontSize","EditableSpan","editMode","setEditMode","width","autoFocus","onBlur","setNewTitle","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","authAPI","data","post","get","delete","todolistAPI","todolistId","put","ResponseStatusCodes","Task","task","removeTask","changeTaskStatus","changeTasksTitle","onChangeHandler","useCallback","newIsDoneValue","checked","id","Completed","New","changeTitle","entityStatus","className","status","Checkbox","Delete","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","authReducer","reducer","actions","isInitialized","setIsInitializedAC","appReducer","setTodolistsAC","todolists","map","tl","filter","RemoveTodolistAC","index","findIndex","splice","AddTodoListAC","unshift","todolist","ChangeTodolistTitleAC","ChangeTodoListFilterAC","changeTodolistEntityStatusAC","todoListsReducer","tasksAPI","taskId","model","setTasksAC","tasks","t","removeTaskAC","taskID","addTaskAC","todoListId","changeTaskTitleAC","changeTaskStatusAC","changeTaskEntityStatusAC","extraReducers","builder","addCase","forEach","tasksReducer","Todolist","useDispatch","useEffect","then","res","items","catch","tasksForRender","addTask","newStatus","changeTaskTitle","newTitle","tasksJSXElements","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","allBtnClass","activeBtnClass","completedBtnClass","changeTodolistTitle","Typography","align","fontWeight","removeTodolist","List","ButtonGroup","disableElevation","Button","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","useAppSelector","useSelector","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","TodolistList","Grid","container","padding","addTodolist","spacing","todoListsComponents","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resultCode","resetForm","justifyContent","item","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","type","FormControlLabel","control","AppWidthRedux","finally","todoListID","success","addTaskTC","updateTodoTitleTC","changeStatus","todoId","getstate","currentTask","find","description","priority","startDate","deadline","updateTaskStatusTC","updateTaskTitleTC","addTodolistsTC","Paper","AppBar","position","Toolbar","edge","aria-label","Menu","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.bd72e5ca.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '1860b8e8-5b0f-42e3-b73c-7abd28b78fff'\r\n    }\r\n})\r\ntype LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe?: boolean,\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{userId: number}>>>('/auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ data: ResponseMeType}>>('/auth/me')\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>('/auth/login')\r\n    }\r\n\r\n}\r\n// {\r\n//     resultCode: 1\r\n//     messages: ['Something wrong'],\r\n//         data: {}\r\n// }\r\n\r\ntype ResponseMeType = {\r\n    id: number,\r\n    email: string,\r\n    login: string,\r\n}\r\n\r\nexport const todolistAPI = {\r\n\r\n    getTodo() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n\r\n    createTodo(title: string) {\r\n        return instance.post<ResponseType<{item:TodolistType}>>('todo-lists', {title})\r\n    },\r\n\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n\r\n    },\r\n\r\n    updateTodo(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title: title})\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\n","import React, {ChangeEvent, ChangeEventHandler, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n\r\n    const errorMsgStyles = {color: 'red'}\r\n    const [title, setTitle] = useState<string>('');\r\n    const [error, setError] = useState<boolean>(false);\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const addItem = () => {\r\n        const trimTitle = title.trim()\r\n        if (trimTitle) {\r\n            props.addItem(trimTitle)\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== false) {\r\n            setError(false)\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n    const errorMessage = error && <div style={errorMsgStyles}>Title is required!</div>\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={\"small\"}\r\n                variant={\"outlined\"}\r\n                error={!!error}\r\n                value={title}\r\n                placeholder={'Enter title...'}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={\"Title\"}\r\n                helperText={errorMessage}\r\n                disabled={props.disabled}\r\n            />\r\n            <IconButton\r\n                onClick={addItem}\r\n                color={\"primary\"}\r\n                size={\"small\"}\r\n                disabled={props.disabled}\r\n            >\r\n                <AddBox fontSize={\"large\"}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, ChangeEventHandler, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    setNewTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\nexport const EditableSpan = React.memo((props: EditableSpanType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState<string>(props.title);\r\n    const onEditMode = () => {\r\n        !props.disabled &&\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.setNewTitle(title)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                style={{width:\"150px\"}}\r\n                value={title}\r\n                autoFocus={true}\r\n                onBlur={offEditMode}\r\n                onChange={changeTitle}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\n\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {TaskDomainType} from \"../../store/tasks-reducer\";\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskDomainType\r\n    removeTask: (taskID: string) => void,\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTasksTitle: (taskID: string, title: string) => void,\r\n    todolistId: string\r\n}\r\n\r\nexport const Task = React.memo(({task, removeTask , changeTaskStatus, changeTasksTitle, todolistId}: TaskPropsType) => {\r\n\r\n    const onClickHandler = () => removeTask(task.id)\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        changeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, todolistId)\r\n    }, [task.id, todolistId]);\r\n    const changeTitle = useCallback( (title: string) => {\r\n        changeTasksTitle(task.id, title)}, [changeTasksTitle, task.id])\r\n\r\n    const disabled = task.entityStatus === 'loading'\r\n\r\n    return <div key={task.id} className={task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            color={\"primary\"}\r\n            onChange={onChangeHandler}\r\n            checked={task.status === TaskStatuses.Completed} disabled={disabled}/>\r\n        <EditableSpan setNewTitle={changeTitle} title={task.title} disabled={disabled}/>\r\n        <IconButton onClick={onClickHandler} disabled={disabled}>\r\n            <Delete fontSize={\"small\"}/>\r\n        </IconButton>\r\n    </div>\r\n\r\n})\r\n","import {\r\n    AddTodoListAC,\r\n    RemoveTodolistAC,\r\n    setTodolistsAC,\r\n} from \"./todoLists-reducer\";\r\nimport {TaskStatuses, TaskType, UpdateTaskModelType} from \"../api/todolist-api\";\r\nimport {tasksAPI} from \"../api/task-api\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType, setAppStatusAC} from \"./app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {Dispatch} from \"redux\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n\r\n}\r\n type TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setTasksAC(state, action: PayloadAction<{tasks: Array<TaskType>, todolistId: string}>){\r\n            state[action.payload.todolistId] = action.payload.tasks.map((t => ({...t, entityStatus: 'idle'})))\r\n        },\r\n        removeTaskAC(state, action: PayloadAction<{taskID: string, todolistId: string}>){\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id !== action.payload.taskID);\r\n            if (index > -1){\r\n                tasks.splice(index, 1);\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{task: TaskType}>){\r\n            state[action.payload.task.todoListId].unshift({...action.payload.task, entityStatus: 'idle'})\r\n        },\r\n        changeTaskTitleAC(state, action: PayloadAction<{taskId: string, title: string, todolistId: string}>){\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1){\r\n                tasks[index] = {...tasks[index], title: action.payload.title}\r\n            }\r\n        },\r\n        changeTaskStatusAC(state, action: PayloadAction<{taskId: string, status: TaskStatuses, todolistId: string}>){\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1){\r\n                tasks[index] = {...tasks[index], status: action.payload.status}\r\n            }\r\n        },\r\n        changeTaskEntityStatusAC(state, action: PayloadAction<{todolistId: string, taskId: string, entityStatus: RequestStatusType}>){\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1){\r\n                tasks[index] = {...tasks[index], entityStatus: action.payload.entityStatus}\r\n            }\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(AddTodoListAC, (state, action)=> {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(RemoveTodolistAC, (state, action)=> {\r\n            delete state[action.payload.todolistId]\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any)=> {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n})\r\n\r\nexport const {removeTaskAC, setTasksAC, addTaskAC, changeTaskTitleAC, changeTaskStatusAC, changeTaskEntityStatusAC} = slice.actions\r\nexport const tasksReducer = slice.reducer\r\n\r\nexport enum ResponseStatusCodes {\r\n    success = 0,\r\n    error = 1,\r\n    captcha = 10\r\n}\r\n\r\nexport const fetchTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        tasksAPI.getTask(todolistId)\r\n            .then((res) => {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                const tasks = res.data.items\r\n                dispatch(setTasksAC({tasks, todolistId}))\r\n            })\r\n            .catch((error: AxiosError)=> {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport const removeTasksTC = (todolistId: string, taskId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTaskEntityStatusAC({taskId, entityStatus: \"loading\", todolistId}))\r\n        tasksAPI.deleteTask(todolistId, taskId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === ResponseStatusCodes.success) {\r\n                    dispatch(removeTaskAC({taskID: taskId, todolistId}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error: AxiosError)=> {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n}\r\n\r\nexport const addTaskTC = (todolistId:string, title:string) =>\r\n     (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        tasksAPI.createTask(todolistId, title)\r\n            .then(res => {\r\n                if (res.data.resultCode === ResponseStatusCodes.success) {\r\n                    const task = res.data.data.item\r\n                    dispatch(addTaskAC({task}))\r\n                } else {\r\n                    handleServerAppError<{item:TaskType}>(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error: AxiosError)=> {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n            .finally(()=>{\r\n                dispatch(setAppStatusAC({status: 'idle'}))\r\n            })\r\n}\r\n\r\nexport const updateTaskStatusTC = (taskId: string, status: TaskStatuses, todoId: string) => (dispatch: Dispatch, getstate: () => AppRootStateType) => {\r\n\r\n    const appState = getstate()\r\n    const tasksApp = appState.tasks\r\n    const tasksForCurrentTodo = tasksApp[todoId]\r\n    const currentTask = tasksForCurrentTodo.find((t) => {\r\n        return t.id === taskId\r\n    })\r\n\r\n    if (currentTask) {\r\n        const model: UpdateTaskModelType = {\r\n            title: currentTask.title,\r\n            status: status,\r\n            description: currentTask.description,\r\n            priority: currentTask.priority,\r\n            startDate: currentTask.startDate,\r\n            deadline: currentTask.deadline\r\n        }\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        dispatch(changeTaskEntityStatusAC({todolistId: todoId, taskId, entityStatus: \"loading\"}))\r\n        tasksAPI.updateTask(todoId, taskId, model)\r\n            // const action = changeTaskStatusAC(id, status, todolistId);\r\n            .then((res) => {\r\n                if (res.data.resultCode === ResponseStatusCodes.success) {\r\n                    dispatch(changeTaskStatusAC({taskId, status, todolistId: todoId}))\r\n                    dispatch(changeTaskEntityStatusAC({todolistId: todoId, taskId, entityStatus: 'idle'}))\r\n                } else {\r\n                    handleServerAppError<{ item: TaskType }>(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error: AxiosError)=> {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n            .finally(()=>{\r\n                dispatch(setAppStatusAC({status: 'idle'}))\r\n            })\r\n    }\r\n}\r\nexport const updateTaskTitleTC = (taskId: string, title: string, todoId: string) => (dispatch: Dispatch, getstate: () => AppRootStateType) => {\r\n\r\n    const appState = getstate()\r\n    const tasksApp = appState.tasks\r\n    const tasksForCurrentTodo = tasksApp[todoId]\r\n    const currentTask = tasksForCurrentTodo.find((t) => {\r\n        return t.id === taskId\r\n    })\r\n\r\n    if (currentTask) {\r\n        const model: UpdateTaskModelType = {\r\n            title: title,\r\n            status: currentTask.status,\r\n            description: currentTask.description,\r\n            priority: currentTask.priority,\r\n            startDate: currentTask.startDate,\r\n            deadline: currentTask.deadline\r\n        }\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTaskEntityStatusAC({todolistId: todoId, taskId, entityStatus: 'loading'}))\r\n        tasksAPI.updateTask(todoId, taskId, model)\r\n            .then(() => {\r\n                dispatch(changeTaskTitleAC({taskId, title, todolistId: todoId}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                dispatch(changeTaskEntityStatusAC({todolistId: todoId, taskId, entityStatus: 'idle'}))\r\n            })\r\n            .catch((error: AxiosError)=> {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import {InitialStateType, setAppErrorAC, setAppStatusAC} from '../store/app-reducer';\r\nimport {Dispatch, EmptyObject} from 'redux';\r\nimport {ResponseType} from '../api/todolist-api';\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {TodolistDomainType} from \"../store/todoLists-reducer\";\r\nimport {TasksStateType} from \"../App/AppWidtxRedux\";\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ThunkDispatch<EmptyObject & { app: InitialStateType; todolists: Array<TodolistDomainType>; tasks: TasksStateType }, unknown, any>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\n","import { Dispatch } from 'redux'\r\nimport { setAppStatusAC } from './app-reducer'\r\nimport {authAPI} from \"../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>){\r\n             {state.isLoggedIn = action.payload.value}\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n// thunks\r\nexport const loginTC = (data: any) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolist-api\";\r\nimport {setIsLoggedInAC} from \"./auth-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type ErrorType = string| null\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as ErrorType,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n        name: \"app\",\r\n        initialState: initialState,\r\n        reducers: {\r\n            setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n                {\r\n                    state.status = action.payload.status\r\n                }\r\n            },\r\n            setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n                {\r\n                    state.error = action.payload.error\r\n                }\r\n            },\r\n            setIsInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n                {\r\n                    state.isInitialized = action.payload.isInitialized\r\n                }\r\n            }\r\n        }\r\n    }\r\n)\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC, setAppErrorAC, setIsInitializedAC} = slice.actions\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        debugger\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n        } else {\r\n        }\r\n    }).finally(()=>{\r\n        dispatch(setIsInitializedAC({isInitialized: true}))\r\n    })\r\n}\r\n","import {TaskType, todolistAPI, TodolistType} from \"../api/todolist-api\";\r\nimport {RequestStatusType, setAppStatusAC} from \"./app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {ResponseStatusCodes} from \"./tasks-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\n\r\nconst initialState:Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setTodolistsAC(state, action: PayloadAction<{todolists: Array<TodolistType>}>){\r\n            return action.payload.todolists.map(tl => (\r\n                {...tl, filter: \"all\", entityStatus: \"idle\"}\r\n            ))\r\n        },\r\n        RemoveTodolistAC(state, action: PayloadAction<{todolistId: string}>){\r\n            const index = state.findIndex(tl=> tl.id === action.payload.todolistId)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        AddTodoListAC(state, action: PayloadAction<{todolist: TodolistType}>){\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        ChangeTodolistTitleAC(state, action: PayloadAction<{todolistId: string, title: string}>){\r\n            const index = state.findIndex(tl=> tl.id === action.payload.todolistId)\r\n            state[index].title = action.payload.title\r\n        },\r\n        ChangeTodoListFilterAC(state, action: PayloadAction<{todolistId: string, filter: FilterValuesType}>){\r\n            const index = state.findIndex(tl=> tl.id === action.payload.todolistId)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{id: string, entityStatus: RequestStatusType}>){\r\n            const index = state.findIndex(tl=> tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.entityStatus\r\n        }\r\n    }\r\n})\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n\r\n}\r\nexport const todoListsReducer = slice.reducer\r\nexport const {setTodolistsAC, RemoveTodolistAC, AddTodoListAC, ChangeTodolistTitleAC, ChangeTodoListFilterAC, changeTodolistEntityStatusAC} = slice.actions\r\n\r\n\r\nexport type changeTodolistEntityStatusAT = ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport const fetchTodolistsTC = ()  => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistAPI.getTodo()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch((error: AxiosError)=> {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistsTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(changeTodolistEntityStatusAC ({id: todolistId, entityStatus: \"loading\"}))\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistAPI.deleteTodo(todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === ResponseStatusCodes.success) {\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                    dispatch(RemoveTodolistAC({todolistId: todolistId}))\r\n                }else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error: AxiosError)=> {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTodolistsTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistAPI.createTodo(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === ResponseStatusCodes.success) {\r\n                    dispatch(AddTodoListAC({todolist: res.data.data.item}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError<{item: TodolistType}>(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error: AxiosError)=> {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const updateTodoTitleTC = (todolistId: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistAPI.updateTodo(todolistId, title)\r\n            // const action = changeTaskStatusAC(id, status, todolistId);\r\n            .then((res) => {\r\n                if (res.data.resultCode === ResponseStatusCodes.success) {\r\n                    dispatch(ChangeTodolistTitleAC({todolistId, title}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error: AxiosError)=> {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n","import axios, {AxiosResponse} from 'axios'\r\nimport {ResponseType, UpdateTaskModelType} from \"./todolist-api\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '1860b8e8-5b0f-42e3-b73c-7abd28b78fff'\r\n    }\r\n})\r\n\r\nexport const tasksAPI = {\r\n\r\n    getTask(todolistId: string) {\r\n        return instance.get<TasksType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{item:TaskType}>> (`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n\r\n    },\r\n\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\ntype TaskType= {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\n type TasksType = {\r\n    error: string\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n}\r\n\r\n//  type ResponseType<D = {}> = {\r\n//     resultCode: number\r\n//     messages: Array<string>\r\n//     data: D\r\n// }\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {FilterValuesType} from \"../../store/todoLists-reducer\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Button, ButtonGroup, Checkbox, IconButton, List, ListItem, Typography} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"../Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../api/todolist-api\";\r\nimport {fetchTasksTC, TaskDomainType} from \"../../store/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {RequestStatusType} from \"../../store/app-reducer\";\r\n\r\n\r\ntype TodolistPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n    tasks: Array<TaskDomainType>\r\n    removeTask: (taskID: string, todoListID: string) => void,\r\n    changeFilter: (filter: FilterValuesType, todoListID: string) => void,\r\n    addTask: (title: string, todoListID: string) => void,\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todoListID: string) => void,\r\n    removeTodolist: (todoListID: string) => void\r\n    changeTasksTitle: (taskID: string, title: string, todoListID: string) => void,\r\n    changeTodolistTitle: (title: string, todoListID: string) => void\r\n\r\n}\r\n\r\nexport const Todolist = React.memo((props: TodolistPropsType) => {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect ( () => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n\r\n    let tasksForRender: Array<TaskDomainType> =  props.tasks;\r\n    if (props.filter === \"active\") {\r\n        tasksForRender = tasksForRender.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForRender = tasksForRender.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n    const removeTask = useCallback((taskId: string)=>{\r\n        props.removeTask(taskId, props.id)\r\n    }, [props.removeTask, props.id])\r\n    const changeTaskStatus = useCallback((taskId: string, newStatus: TaskStatuses)=> {\r\n        props.changeTaskStatus(taskId, newStatus, props.id)\r\n    }, [props.changeTaskStatus, props.id])\r\n    const changeTaskTitle = useCallback((taskID: string, newTitle: string )=>{\r\n        props.changeTasksTitle (taskID, newTitle, props.id)\r\n    }, [props.changeTasksTitle, props.id])\r\n\r\n    const tasksJSXElements = tasksForRender.map(task => {\r\n        return <Task task={task} removeTask={removeTask} changeTaskStatus={changeTaskStatus} changeTasksTitle={changeTaskTitle} todolistId={props.id}/>\r\n    })\r\n\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.id),[props.changeFilter,props.id])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.id),[props.changeFilter,props.id])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.id),[props.changeFilter,props.id])\r\n\r\n    const allBtnClass = (props.filter === \"all\") ? \"secondary\" : \"primary\"\r\n    const activeBtnClass = (props.filter === \"active\") ? \"secondary\" : \"primary\"\r\n    const completedBtnClass = (props.filter === \"completed\") ? \"secondary\" : \"primary\"\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(title, props.id)\r\n    }, [props.changeTodolistTitle, props.id])\r\n\r\n    return <div>\r\n        <Typography\r\n            align={\"center\"}\r\n            variant={\"h6\"}\r\n            style={{fontWeight: \"bold\"}}>\r\n            <EditableSpan\r\n                title={props.title}\r\n                setNewTitle={changeTodolistTitle}\r\n                disabled={props.entityStatus === 'loading'}\r\n            />\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </Typography>\r\n\r\n        <AddItemForm addItem={addTask} disabled={props.entityStatus === 'loading'}/>\r\n\r\n        <List>\r\n            {tasksJSXElements}\r\n        </List>\r\n        <div>\r\n            <ButtonGroup\r\n                variant={'contained'}\r\n                size={'small'}\r\n                disableElevation\r\n            >\r\n                <Button\r\n                    color={allBtnClass}\r\n                    onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button\r\n                    color={activeBtnClass}\r\n                    onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button\r\n                    color={completedBtnClass}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </ButtonGroup>\r\n        </div>\r\n    </div>\r\n})\r\n","import { tasksReducer} from './tasks-reducer';\r\nimport { todoListsReducer} from './todoLists-reducer';\r\nimport { combineReducers} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todoListsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n//export type AppActionsType = TasksActionsType | TodolistActionsType\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType>= useSelector\r\n\r\n\r\n//export type AppThunk <ReturnType = void> = ThunkAction<void, AppRootStateType, unknown, AppActionsType>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from \"react\";\r\nimport {Snackbar} from \"@material-ui/core\";\r\nimport {ErrorType, setAppErrorAC} from \"../../store/app-reducer\";\r\nimport {useAppSelector} from \"../../store/store\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useAppSelector<ErrorType>((state)=>state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" >\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import {Grid} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport React, {useEffect} from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {fetchTodolistsTC} from \"../../store/todoLists-reducer\";\r\n\r\ntype TodoListListPropsType = {\r\n    addTodolist: (title: string)=> void\r\n    todoListsComponents:  JSX.Element[]\r\n}\r\n\r\nexport const TodolistList = (props: TodoListListPropsType) => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state=>state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect (()=>{\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'} />\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: \"29px 0\"}}>\r\n            <AddItemForm addItem={props.addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={4}>\r\n            {props.todoListsComponents}\r\n        </Grid>\r\n    </>\r\n}","import React, {useState} from 'react'\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    Grid,\r\n    TextField\r\n} from \"@material-ui/core\";\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"../../store/auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state=>state.auth.isLoggedIn)\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required email';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required password';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Invalid password';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'} />\r\n    }\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={ formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\" margin=\"normal\" {...formik.getFieldProps(\"email\")}/>\r\n                        {formik.errors.email? <div style={{color: 'red'}}>{formik.errors.email}</div>: null}\r\n                        <TextField type=\"password\" label=\"Password\"\r\n                                   margin=\"normal\" {...formik.getFieldProps(\"password\")}/>\r\n                        {formik.errors.password? <div style={{color: 'red'}}>{formik.errors.password}</div>: null}\r\n                        <FormControlLabel label={'Remember me'} control={<Checkbox/>}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './../components/Todolist/Todolist';\r\nimport {AddItemForm} from \"../components/AddItemForm/AddItemForm\";\r\nimport {\r\n    AppBar,\r\n    Button, CircularProgress,\r\n    Container,\r\n    Grid,\r\n    IconButton,\r\n    LinearProgress,\r\n    Paper,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport \"@fontsource/roboto\";\r\nimport {\r\n    addTodolistsTC,\r\n    ChangeTodoListFilterAC,\r\n    fetchTodolistsTC,\r\n    removeTodolistsTC, TodolistDomainType, updateTodoTitleTC,\r\n} from \"../store/todoLists-reducer\";\r\nimport {\r\n    addTaskTC,\r\n    removeTasksTC, TaskDomainType, updateTaskStatusTC, updateTaskTitleTC\r\n} from \"../store/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType, useAppSelector} from \"../store/store\";\r\nimport {TaskStatuses, TaskType} from \"../api/todolist-api\";\r\nimport {initializeAppTC, RequestStatusType} from \"../store/app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {TodolistList} from \"../components/TodoListList/TodoListList\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../components/Login/Login\";\r\nimport {logoutTC} from \"../store/auth-reducer\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type TodolistType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\n\r\n\r\nfunction AppWidthRedux() {\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    //BLL:\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n    const status = useAppSelector<RequestStatusType>((state)=>state.app.status)\r\n    const isInitialized = useAppSelector<boolean>(state=> state.app.isInitialized)\r\n    const isLoggedIn = useAppSelector<boolean>(state=> state.auth.isLoggedIn)\r\n\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        dispatch(addTaskTC(todoListID, title))\r\n    }, [dispatch])\r\n    const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n        dispatch(removeTasksTC(todoListID, taskID))\r\n    }, [dispatch])\r\n    const changeFilter = useCallback((filter: FilterValuesType, todoListID: string) => {\r\n        dispatch(ChangeTodoListFilterAC({filter, todolistId: todoListID}))\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback((title: string, todoListID: string) => {\r\n        dispatch(updateTodoTitleTC(todoListID, title))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((taskID: string, status: TaskStatuses, todoListID: string) => {\r\n        dispatch(updateTaskStatusTC(taskID, status, todoListID))\r\n    }, [dispatch])\r\n    const changeTasksTitle = useCallback((taskID: string, title: string, todoListID: string) => {\r\n        dispatch(updateTaskTitleTC(taskID, title, todoListID))\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback((todoListID: string) => {\r\n        dispatch(removeTodolistsTC(todoListID))\r\n\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistsTC(title))\r\n    }, [dispatch])\r\n    const Logout = ()=> {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n\r\n    // UI:\r\n    const todoListsComponents = todolists.map(tl => {\r\n\r\n        return (\r\n            <Grid item>\r\n                <Paper elevation={8} style={{padding: \"20px\"}}>\r\n                    <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        entityStatus={tl.entityStatus}\r\n                        tasks={tasks[tl.id]}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        filter={tl.filter}\r\n                        changeTaskStatus={changeStatus}\r\n                        removeTodolist={removeTodolist}\r\n                        changeTasksTitle={changeTasksTitle}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>)\r\n    })\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    {isLoggedIn &&  <Button color=\"inherit\" variant={\"outlined\"} onClick={Logout}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' &&  <LinearProgress color={'secondary'}/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={'/'} element={<TodolistList addTodolist={addTodolist} todoListsComponents={todoListsComponents}/>}/>\r\n                    <Route path={'/login'} element={<Login />}/>\r\n                    <Route path=\"/404\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path=\"*\" element={<Navigate to={'404'}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWidthRedux;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWidthRedux from \"./App/AppWidtxRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <AppWidthRedux/>\r\n        </HashRouter>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}